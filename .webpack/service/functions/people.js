(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 31);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/extends");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _Controller=__webpack_require__(12);Object.defineProperty(exports,'BaseController',{enumerable:true,get:function(){return _interopRequireDefault(_Controller).default;}});var _Exceptions=__webpack_require__(2);Object.defineProperty(exports,'Exceptions',{enumerable:true,get:function(){return _interopRequireDefault(_Exceptions).default;}});var _Middleware=__webpack_require__(14);Object.defineProperty(exports,'Middleware',{enumerable:true,get:function(){return _interopRequireDefault(_Middleware).default;}});var _Request=__webpack_require__(4);Object.defineProperty(exports,'Request',{enumerable:true,get:function(){return _interopRequireDefault(_Request).default;}});var _Response=__webpack_require__(3);Object.defineProperty(exports,'Response',{enumerable:true,get:function(){return _interopRequireDefault(_Response).default;}});function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});function _extendableBuiltin3(cls){function ExtendableBuiltin(){cls.apply(this,arguments);}ExtendableBuiltin.prototype=Object.create(cls.prototype,{constructor:{value:cls,enumerable:false,writable:true,configurable:true}});if(Object.setPrototypeOf){Object.setPrototypeOf(ExtendableBuiltin,cls);}else{ExtendableBuiltin.__proto__=cls;}return ExtendableBuiltin;}function _extendableBuiltin2(cls){function ExtendableBuiltin(){cls.apply(this,arguments);}ExtendableBuiltin.prototype=Object.create(cls.prototype,{constructor:{value:cls,enumerable:false,writable:true,configurable:true}});if(Object.setPrototypeOf){Object.setPrototypeOf(ExtendableBuiltin,cls);}else{ExtendableBuiltin.__proto__=cls;}return ExtendableBuiltin;}function _extendableBuiltin(cls){function ExtendableBuiltin(){cls.apply(this,arguments);}ExtendableBuiltin.prototype=Object.create(cls.prototype,{constructor:{value:cls,enumerable:false,writable:true,configurable:true}});if(Object.setPrototypeOf){Object.setPrototypeOf(ExtendableBuiltin,cls);}else{ExtendableBuiltin.__proto__=cls;}return ExtendableBuiltin;}class BaseException extends _extendableBuiltin(Error){constructor(message,code){super(message);this.code=typeof code!=='undefined'?code:0;}}class BadRequestException extends BaseException{constructor(message,code){super(message,code);this.statusCode=400;this.name='Bad Request';}}exports.BadRequestException=BadRequestException;class UnAuthorizedException extends BaseException{constructor(message,code){super(message,code);this.statusCode=401;this.name='Unauthorized';}}exports.UnAuthorizedException=UnAuthorizedException;class NotFoundException extends _extendableBuiltin2(Error){constructor(message,code){super(message,code);this.statusCode=404;this.name='Not Found';}}exports.NotFoundException=NotFoundException;class DataValidationFailedException extends _extendableBuiltin3(Error){constructor(message,body,code){super(message,code);this.statusCode=422;this.name='Data Validation failed';this.body=body;}}exports.DataValidationFailedException=DataValidationFailedException;exports.default={BadRequestException,UnAuthorizedException,NotFoundException,DataValidationFailedException};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _extends2=__webpack_require__(0);var _extends3=_interopRequireDefault(_extends2);var _objectWithoutProperties2=__webpack_require__(13);var _objectWithoutProperties3=_interopRequireDefault(_objectWithoutProperties2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/**
 * Class to handle responses back to Lambda
 *
 * @type {Response}
 */class Response{/**
   * Pass the Lambda function that comes in the handler
   *
   * @param lambdaCallback
   * @public
   */constructor(lambdaCallback){this.callback=lambdaCallback;this._statusCode=200;this._headers={};this._options={};}/**
   * Change the status code
   *
   * @param statusCode
   * @returns {Response}
   */statusCode(statusCode){if(statusCode===undefined)return this._statusCode;this._statusCode=parseInt(statusCode);if(isNaN(this._statusCode))this._statusCode=500;if(this._statusCode<200||this._statusCode>599)this._statusCode=500;return this;}/**
   * Get all headers, retrieve a header or add one/many headers
   *
   * @param key
   * @param value
   * @returns {*}
   */headers(key,value){// If called empty it returns all the headers
if(key===undefined&&value===undefined){return this._headers;}// Set or return the key when it is a string
if(typeof key==='string'){if(value===undefined){return this._headers[key.toLowerCase()]||null;}else{this._headers[key.toLowerCase()]=value;return this;}}// Add multiple headers
let headerNames=Object.keys(key);for(let i=0;i<headerNames.length;i++){let headerName=headerNames[i].toLowerCase();this._headers[headerName]=key[headerNames[i]];}return this;}options(key,value){// If called empty it returns all the options
if(key===undefined&&value===undefined){return this._options;}// Set or return the key when it is a string
if(typeof key==='string'){if(value===undefined){return this._options[key]||null;}else{this._options[key]=value;return this;}}// Add multiple options
let optionsNames=Object.keys(key);for(let i=0;i<optionsNames.length;i++){let optionName=optionsNames[i];this._options[optionName]=key[optionsNames[i]];}return this;}/**
   * Send the body as a response
   *
   * @param body
   * @public
   */send(body){const _options=this._options,{raw}=_options,rest=(0,_objectWithoutProperties3.default)(_options,['raw']);if(body===undefined)body={};if(!raw){if(typeof body!=='object')body={message:body};body=JSON.stringify(body||{});}this.callback(null,(0,_extends3.default)({statusCode:this._statusCode,body,headers:this._headers},rest));}/**
   * Fail with a 4XX statusCode
   *
   * @param body
   * @param statusCode
   * @public
   */fail(body,statusCode){if(body===undefined)body={};if(typeof body!=='object')body={message:body};this.statusCode(Math.abs(parseInt(statusCode||400))%100+400).send(Object.assign({message:'Something went wrong'},body||{}));}/**
   * Fail with a 5XX statusCode
   *
   * @param err
   * @param statusCode
   * @public
   */fail500(err,statusCode){if(err===undefined)err=new Error("Called 'fail500' without error");if(!err)err={message:'Internal server error'// Log the error to identify later
};if(err.stack){console.error(err.stack);}else{console.error(err);}// Send a response in a proper format to the customer
this.statusCode(Math.abs(parseInt(statusCode||500))%100+500).send({message:'Internal server error'});}}exports.default=Response;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});/**
 * A Request type to easily send requests to services
 *
 * @type {Request}
 */class Request{/**
   * Create the request by passing the event and context received
   * in the lambda handler. This class has methods to retrieve info
   * from those parameters
   *
   * @param event
   * @param context
   * @public
   */constructor(event,context){this.event=event;this.context=context;}/**
   * Extract a value from an object using dot notation. It can
   * get nested objects
   *
   * @param obj
   * @param key
   * @param defaultValue
   * @returns {*}
   * @public
   */__get(obj,key,defaultValue){if(!obj)return defaultValue===undefined?null:defaultValue;const path=key.split('.');for(let i=0;i<path.length;i++){if(typeof obj==='object'){if(obj[path[i]]){obj=obj[path[i]];}else{obj=defaultValue===undefined?null:defaultValue;break;}}else{return defaultValue===undefined?null:defaultValue;}}return obj;}/**
   * Get a value from a path variable
   *
   * @param key
   * @param defVal
   * @returns {*}
   * @public
   */path(key,defVal){if(key===undefined)return this.event.pathParameters||{};return this.__get(this.event.pathParameters,key,defVal);}/**
   * Get a value from the body of the request
   *
   * @param key
   * @param defVal
   * @returns {*}
   * @public
   */post(key,defVal){// Make sure that body is not a JSON string but an object
// because AWS sends it as a JSON string
if(this.event.body&&typeof this.event.body==='string'){try{this.event.body=JSON.parse(this.event.body);}catch(ex){this.event.body={};}}if(key===undefined)return this.event.body||{};return this.__get(this.event.body,key,defVal);}/**
   * Get a value from the query parameters
   *
   * @param key
   * @param defVal
   * @returns {*}
   * @public
   */query(key,defVal){if(key===undefined)return this.event.queryStringParameters||{};return this.__get(this.event.queryStringParameters,key,defVal);}/**
     * Get a value from the method
     *
     * @returns {*}
     * @public
     */method(){return this.event.httpMethod||'';}/**
   * Get a value from the headers
   *
   * @param key
   * @param defVal
   * @returns {*}
   */headers(key,defVal){if(key===undefined)return this.event.headers||{};return this.__get(this.event.headers,key,defVal);}/**
   * Return the IP Address of the request from the AWS event
   *
   * @returns {*}
   */ip(){let ipVal=this.__get(this.event,'requestContext.identity.sourceIp',null);if(ipVal==='::'){ipVal='127.0.0.1';}return ipVal;}}exports.default=Request;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports.Swapi=undefined;var _swapi=__webpack_require__(16);var _swapi2=_interopRequireDefault(_swapi);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.Swapi=_swapi2.default;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("yenv");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});class IRepository{constructor(){if(this.create===undefined)throw new Error('Must override .create() method.');if(this.update===undefined)throw new Error('Must override .update() method');if(this.get===undefined)throw new Error('Must override .get() metod');if(this.getById===undefined)throw new Error('Must override .getById() method');if(this.remove===undefined)throw new Error('Must override .remove() method');}}exports.default=IRepository;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports.PeopleController=exports.FilmController=undefined;var _Film=__webpack_require__(10);var _Film2=_interopRequireDefault(_Film);var _People=__webpack_require__(18);var _People2=_interopRequireDefault(_People);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.FilmController=_Film2.default;exports.PeopleController=_People2.default;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _extends2=__webpack_require__(0);var _extends3=_interopRequireDefault(_extends2);var _lodash=__webpack_require__(11);var _swapiHelpers=__webpack_require__(1);var _swapiUtils=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{CorsMiddleware}=_swapiHelpers.Middleware;const getFilms=()=>{return new Promise((resolve,reject)=>{_swapiUtils.Swapi.getFilms(data=>resolve(data));});};class FilmRepositoryController extends _swapiHelpers.BaseController{constructor(unitOfWork){super();this.unitOfWork=unitOfWork;return this;}init(event,context,callback){this.middleware(CorsMiddleware);return super.init(event,context,callback);}async handle(event,context,callback){const method=this.request.method();var operation=null;switch(method){case'GET':operation=await this.get();break;case'POST':operation=await this.create();break;case'PATCH':operation=await this.update();break;case'DELETE':operation=await this.remove();break;default:res.status(500).send({error:'Method not supported!'});break;}return operation;}async get(){const{FilmRepository}=this.unitOfWork;const filters=this.request.query();const films=(await FilmRepository.get(filters))||[];const filmsApi=await getFilms();const results=(0,_lodash.concat)((0,_lodash.get)(filmsApi,'results',[]),films);return(0,_extends3.default)({},filmsApi,{results,count:filmsApi.count+results.length});}async getById(){const{FilmRepository}=this.unitOfWork;const{id}=this.request.path();const film=await FilmRepository.getById(id);return film;}async create(){const{FilmRepository}=this.unitOfWork;const film=this.request.post();const created=Date(Date.now()).toString();const filmSaved=await FilmRepository.create((0,_extends3.default)({},film,{created}));const childs=['people','planet','specie','starship','vehicle'];const checkAndCreateChilds=(entity=null)=>{if(film[entity]){if(Array.isArray(film[entity])){return film[entity].map(e=>filmSaved.createFilmRelation({relation_id:e,relation:entity,created}));}else{return filmSaved.createFilmRelation({relation_id:film[entity],relation:entity,created});}}};await Promise.all(childs.map(e=>checkAndCreateChilds(e)));return filmSaved;}async update(){const{FilmRepository}=this.unitOfWork;const{id}=this.request.path();const film=this.request.post();const rowUpdate=await FilmRepository.update(id,film);if(rowUpdate){const filmUpdated=await FilmRepository.getById(id);return filmUpdated;}return{};}async remove(){const{FilmRepository}=this.unitOfWork;const{id}=this.request.path();const film=await FilmRepository.remove(id);return film;}}exports.default=FilmRepositoryController;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _Exceptions=__webpack_require__(2);var _Exceptions2=_interopRequireDefault(_Exceptions);var _Response=__webpack_require__(3);var _Response2=_interopRequireDefault(_Response);var _Request=__webpack_require__(4);var _Request2=_interopRequireDefault(_Request);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{BadRequestException,DataValidationFailedException,UnAuthorizedException,NotFoundException}=_Exceptions2.default;class BaseController{constructor(){this.middlewares=[];}init(event,context,callback){this.request=new _Request2.default(event,context);this.response=new _Response2.default(callback);context.callbackWaitsForEmptyEventLoop=false;try{const middlewarePromise=this.processRequest();const handle=this.handle.bind(this);return middlewarePromise.then(handle).then(response=>this.response.send(response)).catch(e=>{this.handleException(e);});}catch(e){this.handleException(e);}}/**
   * You MUST implement this method.
   * It is supposed to be used to handle the logic in
   * your controller. Should returns a promise or raise
   * an Exception from core/Exceptions
   */handle(){throw new Error('You must implement the method handle');}middleware(middlewareClass){this.middlewares.push(middlewareClass);}processRequest(){const promises=[];for(let i=0;i<this.middlewares.length;i++){let Middleware=this.middlewares[i];let middlewareObj=new Middleware(this.request,this.response);let method=middlewareObj.processRequest.bind(middlewareObj);promises.push(method());}return Promise.resolve(Promise.all(promises));}handleException(e){const isSimilarError=function(e){const similarErrors=[BadRequestException,UnAuthorizedException,NotFoundException];for(let i=0;i<similarErrors.length;i++){if(e instanceof similarErrors[i]){return true;}}return false;};if(isSimilarError(e)){this.response.fail({status:e.statusCode,name:e.name,message:e.message,code:e.code},e.statusCode);}else if(e instanceof DataValidationFailedException){this.response.statusCode(e.statusCode).send(e.body);}else{this.response.fail500(e);}}}exports.default=BaseController;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/objectWithoutProperties");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _path=__webpack_require__(5);var _path2=_interopRequireDefault(_path);var _i18n=__webpack_require__(15);var _i18n2=_interopRequireDefault(_i18n);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}_i18n2.default.configure({directory:_path2.default.join(__dirname,'./resources/lang'),register:global,updateFiles:false,defaultLocale:'en'});/**
 * Every middleware can define processRequest.
 * That method must return a Promise
 */class BaseMiddleware{constructor(request,response){this.request=request;this.response=response;}}class LanguageMiddleware extends BaseMiddleware{processRequest(){let headers=this.request.headers();this.request.language='en';if(headers['Accept-Language']){this.request.language=headers['Accept-Language'].substring(0,2);_i18n2.default.setLocale(this.request.language);}return Promise.resolve();}}class CorsMiddleware extends BaseMiddleware{processRequest(){this.response.headers({'Access-Control-Allow-Origin':'*','Access-Control-Allow-Credentials':true});return Promise.resolve();}}exports.default={LanguageMiddleware,CorsMiddleware};

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("i18n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});const fetch=__webpack_require__(17);const yenv=__webpack_require__(7);const env=process.env.NODE_ENV||'development';const stage=yenv('.env.yml',{env});const swapiModule=function(){var rootURL=stage.SWAPI_URL;function request(url,cb){return fetch(url).then(function(res){return res.json();}).then(function(data){if(typeof cb==="function"){cb(data);}return data;}).catch(function(err){console.log(err);});}function getResources(cb){return request(rootURL,cb);}function singularRequestGenerator(path){return function(id,cb){return request(rootURL+path+"/"+id+"/",cb);};}function pluralRequestGenerator(path){return function(){let queryObject=undefined;let cb=undefined;if(arguments.length>1){queryObject=arguments[0];cb=arguments[1];}else if(arguments[0]){// If given exactly one argument
if(typeof arguments[0]==="function"){cb=arguments[0];queryObject=null;}else{cb=null;queryObject=arguments[0];}}if(queryObject){let searchParams=new URLSearchParams();for(let key of Object.keys(queryObject)){let value=queryObject[key];searchParams.append(key,value);}return request(rootURL+path+"/?"+searchParams.toString(),cb);}return request(rootURL+path+"/",cb);};}return{getResources:getResources,getPerson:singularRequestGenerator("people"),getPeople:pluralRequestGenerator("people"),getFilm:singularRequestGenerator("films"),getFilms:pluralRequestGenerator("films"),getPlanet:singularRequestGenerator("planets"),getPlanets:pluralRequestGenerator("planets"),getSpecies:singularRequestGenerator("species"),getAllSpecies:pluralRequestGenerator("species"),getStarship:singularRequestGenerator("starships"),getStarships:pluralRequestGenerator("starships"),getVehicle:singularRequestGenerator("vehicles"),getVehicles:pluralRequestGenerator("vehicles")};}();exports.default=swapiModule;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("node-fetch");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _extends2=__webpack_require__(0);var _extends3=_interopRequireDefault(_extends2);var _swapiHelpers=__webpack_require__(1);var _swapiUtils=__webpack_require__(6);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{CorsMiddleware}=_swapiHelpers.Middleware;const getPeopleRepositorys=()=>{return new Promise((resolve,reject)=>{_swapiUtils.Swapi.getPeopleRepositorys(data=>resolve(data));});};class PeopleRepositoryController extends _swapiHelpers.BaseController{constructor(unitOfWork){super();this.unitOfWork=unitOfWork;return this;}init(event,context,callback){this.middleware(CorsMiddleware);return super.init(event,context,callback);}async handle(event,context,callback){const method=this.request.method();var operation=null;switch(method){case'GET':operation=await this.get();break;case'POST':operation=await this.create();break;case'PATCH':operation=await this.update();break;case'DELETE':operation=await this.remove();break;default:res.status(500).send({error:'Method not supported!'});break;}return operation;}async get(){const{PeopleRepository}=this.unitOfWork;const filters=this.request.query();const peoples=await PeopleRepository.get(filters);const peoplesApi=await getPeopleRepositorys();return(0,_extends3.default)({},peoplesApi,{results:peoplesApi.results.concat(peoples)});}async getById(){const{PeopleRepository}=this.unitOfWork;const{id}=this.request.path();const people=await PeopleRepository.getById(id);return people;}async create(){const{PeopleRepository}=this.unitOfWork;const people=this.request.post();const created=Date(Date.now()).toString();const peopleSaved=await PeopleRepository.create((0,_extends3.default)({},people,{created}));return peopleSaved;}async update(){const{PeopleRepository}=this.unitOfWork;const{id}=this.request.path();const people=this.request.post();const rowUpdate=await PeopleRepository.update(id,people);if(rowUpdate){const peopleUpdated=await PeopleRepository.getById(id);return peopleUpdated;}return{};}async remove(){const{PeopleRepository}=this.unitOfWork;const{id}=this.request.path();const people=await PeopleRepository.remove(id);return people;}}exports.default=PeopleRepositoryController;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports.unitOfWork=undefined;var _UnitOfWork=__webpack_require__(20);var _UnitOfWork2=_interopRequireDefault(_UnitOfWork);var _DBContext=__webpack_require__(24);var _DBContext2=_interopRequireDefault(_DBContext);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const unitOfWork=new _UnitOfWork2.default(_DBContext2.default);exports.unitOfWork=unitOfWork;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _swapiRepositories=__webpack_require__(21);class UnitOfWork{constructor(dbContext){this.dbContext=dbContext;this.FilmRepository=new _swapiRepositories.FilmRepository(dbContext);this.PeopleRepository=new _swapiRepositories.PeopleRepository(dbContext);}}exports.default=UnitOfWork;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports.PeopleRepository=exports.FilmRepository=undefined;var _Film=__webpack_require__(22);var _Film2=_interopRequireDefault(_Film);var _People=__webpack_require__(23);var _People2=_interopRequireDefault(_People);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.FilmRepository=_Film2.default;exports.PeopleRepository=_People2.default;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _IRepository=__webpack_require__(8);var _IRepository2=_interopRequireDefault(_IRepository);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}class FilmRepository extends _IRepository2.default{constructor(dbContext){super();this.dbContext=dbContext;return this;}async create(film){try{const{Film}=this.dbContext;const filmSaved=await Film.create(film);return filmSaved;}catch(e){console.log(e);}}async update(id,film){try{const{Film}=this.dbContext;const filmSaved=await Film.update(film,{where:{id}});return filmSaved;}catch(e){console.log(e);}}async get(filters){try{const{Film}=this.dbContext;const film=await Film.findAll(filters);return film;}catch(e){console.log(e);}}async getById(id){try{const{Film}=this.dbContext;const film=await Film.findOne({where:{id}});return film;}catch(e){console.log(e);}}async remove(id){const{Film}=this.dbContext;const film=await Film.findOne({where:{id}});await Film.destroy({where:{id}});return film;}}exports.default=FilmRepository;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _IRepository=__webpack_require__(8);var _IRepository2=_interopRequireDefault(_IRepository);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}class PeopleRepository extends _IRepository2.default{constructor(dbContext){super();this.dbContext=dbContext;return this;}async create(people){try{const{People}=this.dbContext;const peopleSaved=await People.create(people);return peopleSaved;}catch(e){console.log(e);}}async update(id,people){try{const{People}=this.dbContext;const peopleSaved=await People.update(people,{where:{id}});return peopleSaved;}catch(e){console.log(e);}}async get(filters){try{const{People}=this.dbContext;const people=await People.findAll(filters);return people;}catch(e){console.log(e);}}async getById(id){try{const{People}=this.dbContext;const people=await People.findOne({where:{id}});return people;}catch(e){console.log(e);}}async remove(id){const{People}=this.dbContext;const people=await People.findOne({where:{id}});await People.destroy({where:{id}});return people;}}exports.default=PeopleRepository;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});var _swapiDatabase=__webpack_require__(25);var _swapiDatabase2=_interopRequireDefault(_swapiDatabase);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const env=process.env.NODE_ENV||'development';const config=__webpack_require__(29)[env];const cnManager=new _swapiDatabase2.default(config);const db=cnManager.getConnection();exports.default=db;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
const fs=__webpack_require__(26);const path=__webpack_require__(5);const Sequelize=__webpack_require__(27);const basename=path.basename(__filename);const{FRAMEWORK}=__webpack_require__(28);var _instance=null;const modelsPath=path.resolve(__dirname,'./models');class ConnectionManager{constructor(config={}){this.framework=config.framework||FRAMEWORK.SEQUELIZE;this.database=config.database;this.username=config.username;this.password=config.password;this.host=config.host;this.port=config.port;this.dialect=config.dialect;this.sequelize={};this.directory=config.directory||modelsPath;this.use_env_variable=config.use_env_variable;this.connection=null;if(!_instance){_instance=this;}return _instance;}getConnection(){switch(this.framework){case FRAMEWORK.SEQUELIZE:this.connection=this.connection||this.getSequelize();break;default:this.connection=this.connection||this.getSequelize();break;}return this.connection;}getSequelize(){const db={};const{database,username,password,directory,host,port,dialect,use_env_variable}=this;const config={database,username,password,host,port,dialect};try{if(use_env_variable){this.sequelize=new Sequelize(process.env[use_env_variable],config);}else{this.sequelize=new Sequelize(database,username,password,config);}fs.readdirSync(directory).filter(file=>{return file.indexOf('.')!==0&&file!==basename&&file.slice(-3)==='.js';}).forEach(file=>{const model=this.sequelize['import'](path.join(directory,file));db[model.name]=model;});Object.keys(db).forEach(modelName=>{if(db[modelName].associate){db[modelName].associate(db);}});db.sequelize=this.sequelize;db.Sequelize=Sequelize;}catch(err){db.stacktrace=err;db.message='ConnectionManagerError in getSequelizeConnection';console.error(err);}return db;}}module.exports=ConnectionManager;

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("sequelize");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
const FRAMEWORK={SEQUELIZE:'sequelize'};module.exports={FRAMEWORK};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
const yenv=__webpack_require__(7);const env=process.env.NODE_ENV||'development';const stage=yenv('.env.yml',{env});module.exports={development:{username:stage.DB_USERNAME,password:stage.DB_PASSWORD,database:stage.DB_DATABASE,host:stage.DB_HOST,dialect:stage.DB_DIALECT},test:{username:stage.DB_USERNAME,password:stage.DB_PASSWORD,database:stage.DB_DATABASE,host:stage.DB_HOST,dialect:stage.DB_DIALECT},production:{username:stage.DB_USERNAME,password:stage.DB_PASSWORD,database:stage.DB_DATABASE,host:stage.DB_HOST,dialect:stage.DB_DIALECT}};

/***/ }),
/* 30 */,
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _swapiControllers=__webpack_require__(9);var _persistence=__webpack_require__(19);const peopleController=new _swapiControllers.PeopleController(_persistence.unitOfWork);module.exports.handler=peopleController.init.bind(peopleController);

/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,